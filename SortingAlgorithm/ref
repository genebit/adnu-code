#include <iostream>

using namespace std;

// ignore dis
void init()
{
    freopen("../Input.txt", "r", stdin);
    freopen("../Output.txt", "w", stdout);
}

void swap(int &a, int &b)
{
    int temp = a;
    a = b;
    b = temp;
}

bool checkIfSorted(int arr[], int size, int &start_front, int &start_end)
{
    for (int i = 0; i < size - 1; ++i)
    {
        if (arr[i] > arr[i + 1])
        {
            start_front++;
            start_end--;

            return false;
        }
    }
    return true;
}

bool checkIfSorted(int arr[], int size)
{
    for (int i = 0; i < size - 1; ++i)
        if (arr[i] > arr[i + 1])
            return false;
    return true;
}

void cocktailSort(int arr[], int size)
{
    // ALGORITHM:
    // first pass (forward) get largest num and move to the end.
    // second pass (backward) starts from last-n, gets the smallest value and move to the front+n of the list.
    // third pass (forward) starts from front+n, get largest num and move till last-n
    // ...

    // both will be incremented/decremented foreach iteration
    int start_front = 0;
    int start_end = size - 1;

    bool is_arr_sorted = checkIfSorted(arr, size);
    while (!is_arr_sorted)
    {
        // forward traverse
        for (int i = start_front; i < start_end; ++i)
        {
            int next = i + 1;
            if (arr[i] > arr[next])
                swap(arr[i], arr[next]);
        }

        // backwards traverse
        for (int i = start_end; i > start_front; --i)
        {
            int prev = i - 1;
            if (arr[prev] > arr[i])
                swap(arr[prev], arr[i]);
        }

        // check if the array is sorted, otherwise keep sorting
        int arr_already_sorted = checkIfSorted(arr, size, start_front, start_end);
        if (arr_already_sorted)
        {
            is_arr_sorted = true;
        }
    }
}

int main()
{
    // ignore dis func call
    init();

    int arr[] = { 4, 0, 2, 1, 1, 5 };
    int size = sizeof(arr) / sizeof(arr[0]);

    cocktailSort(arr, size);

    for (int i : arr)
    {
        cout << i << endl;
    }

    return 0;
}